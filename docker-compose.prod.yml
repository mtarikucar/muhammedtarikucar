services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15
    container_name: blog_postgresql
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql:ro
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: blog_redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: blog_server
    restart: always
    env_file:
      - .env
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${CLIENT_URL}
    container_name: blog_client
    restart: always
    depends_on:
      - server
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: blog_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./server/uploads:/app/uploads:ro
    depends_on:
      - client
      - server
    networks:
      - blog_network

  # Backup service (optional)
  backup:
    image: postgres:15
    container_name: blog_backup
    restart: always
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/bash -c "chmod +x /backup.sh && crond -f -d 8"
    depends_on:
      - postgresql
    networks:
      - blog_network
    profiles:
      - backup

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local

networks:
  blog_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16