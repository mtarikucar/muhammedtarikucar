services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15
    container_name: blog_postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: blog_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5433:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql:ro
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d blog_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: blog_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: blog_server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://admin:password123@postgresql:5432/blog_db
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: blog_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      REDIS_URL: redis://redis:6379
      CLIENT_URL: https://muhammedtarikucar.com
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      REFRESH_TOKEN_SECRET: your-super-secret-refresh-token-key-here-change-in-production
      JWT_EXPIRES_IN: 15m
      REFRESH_TOKEN_EXPIRES_IN: 7d
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: ./uploads
    ports:
      - "5000:5000"
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: blog_client
    restart: unless-stopped
    ports:
      - "8082:80"
    depends_on:
      - server
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: blog_nginx
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - blog_network
    profiles:
      - production

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local

networks:
  blog_network:
    driver: bridge
