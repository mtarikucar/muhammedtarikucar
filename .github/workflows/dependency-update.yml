name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [server, client]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Update dependencies
        working-directory: ./${{ matrix.directory }}
        run: |
          npm update
          npm audit fix --force || true

      - name: Check for changes
        id: changes
        working-directory: ./${{ matrix.directory }}
        run: |
          if git diff --quiet package*.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(${{ matrix.directory }}): update dependencies"
          title: "chore(${{ matrix.directory }}): update dependencies"
          body: |
            ## Dependency Updates for ${{ matrix.directory }}
            
            This PR updates dependencies in the ${{ matrix.directory }} directory.
            
            ### Changes
            - Updated npm dependencies to latest versions
            - Applied security fixes where available
            
            ### Testing
            - [ ] All tests pass
            - [ ] Application builds successfully
            - [ ] No breaking changes detected
            
            **Auto-generated by GitHub Actions**
          branch: dependency-updates/${{ matrix.directory }}
          delete-branch: true
          labels: |
            dependencies
            ${{ matrix.directory }}
            automated

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [server, client]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Run security audit
        working-directory: ./${{ matrix.directory }}
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true

      - name: Parse audit results
        working-directory: ./${{ matrix.directory }}
        run: |
          if [ -f audit-results.json ]; then
            vulnerabilities=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
            echo "VULNERABILITIES=$vulnerabilities" >> $GITHUB_ENV
            
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Found $vulnerabilities vulnerabilities in ${{ matrix.directory }}"
              cat audit-results.json | jq '.advisories'
            fi
          fi

      - name: Create security issue
        if: env.VULNERABILITIES > 0
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const auditResults = JSON.parse(fs.readFileSync('${{ matrix.directory }}/audit-results.json', 'utf8'));
            
            const vulnerabilities = auditResults.metadata?.vulnerabilities || {};
            const advisories = auditResults.advisories || {};
            
            let issueBody = `## Security Vulnerabilities Found in ${{ matrix.directory }}
            
            **Total Vulnerabilities:** ${vulnerabilities.total || 0}
            - Critical: ${vulnerabilities.critical || 0}
            - High: ${vulnerabilities.high || 0}
            - Moderate: ${vulnerabilities.moderate || 0}
            - Low: ${vulnerabilities.low || 0}
            
            ### Details
            `;
            
            Object.values(advisories).forEach(advisory => {
              issueBody += `
            #### ${advisory.title}
            - **Severity:** ${advisory.severity}
            - **Package:** ${advisory.module_name}
            - **Vulnerable Versions:** ${advisory.vulnerable_versions}
            - **Patched Versions:** ${advisory.patched_versions}
            - **More Info:** ${advisory.url}
            `;
            });
            
            issueBody += `
            
            ### Recommended Actions
            1. Review the vulnerabilities listed above
            2. Update affected packages to patched versions
            3. Run \`npm audit fix\` to automatically fix issues where possible
            4. For manual fixes, update package.json and run \`npm install\`
            
            **Auto-generated by Security Audit workflow**
            `;
            
            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,dependencies,${{ matrix.directory }}',
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security vulnerabilities found in ${{ matrix.directory }}`,
                body: issueBody,
                labels: ['security', 'dependencies', '${{ matrix.directory }}', 'high-priority']
              });
            }

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build server image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          load: true
          tags: security-scan-server:latest

      - name: Build client image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          load: true
          tags: security-scan-client:latest

      - name: Run Trivy vulnerability scanner on server image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan-server:latest'
          format: 'sarif'
          output: 'trivy-server-results.sarif'

      - name: Run Trivy vulnerability scanner on client image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan-client:latest'
          format: 'sarif'
          output: 'trivy-client-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-server-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-client-results.sarif'

  outdated-check:
    name: Check Outdated Packages
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [server, client]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Check for outdated packages
        working-directory: ./${{ matrix.directory }}
        run: |
          npm outdated --json > outdated.json || true

      - name: Create outdated packages report
        working-directory: ./${{ matrix.directory }}
        run: |
          if [ -f outdated.json ] && [ -s outdated.json ]; then
            echo "Outdated packages found in ${{ matrix.directory }}:"
            cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) -> \(.value.latest)"'
            
            # Create a summary file
            cat outdated.json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.current) â†’ \(.value.latest)"' > outdated-summary.txt
          else
            echo "No outdated packages found in ${{ matrix.directory }}"
            echo "All packages are up to date! ðŸŽ‰" > outdated-summary.txt
          fi

      - name: Upload outdated packages report
        uses: actions/upload-artifact@v3
        with:
          name: outdated-packages-${{ matrix.directory }}
          path: ${{ matrix.directory }}/outdated-summary.txt
          retention-days: 30

  summary:
    name: Dependency Update Summary
    runs-on: ubuntu-latest
    needs: [update-dependencies, security-audit, docker-security-scan, outdated-check]
    if: always()
    
    steps:
      - name: Download outdated packages reports
        uses: actions/download-artifact@v3
        with:
          path: reports/

      - name: Create summary issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let summaryBody = `## Weekly Dependency Update Summary
            
            This is an automated summary of dependency updates and security checks.
            
            ### Update Status
            - **Update Dependencies:** ${{ needs.update-dependencies.result }}
            - **Security Audit:** ${{ needs.security-audit.result }}
            - **Docker Security Scan:** ${{ needs.docker-security-scan.result }}
            - **Outdated Check:** ${{ needs.outdated-check.result }}
            
            ### Outdated Packages
            `;
            
            try {
              const serverReport = fs.readFileSync('reports/outdated-packages-server/outdated-summary.txt', 'utf8');
              summaryBody += `
            #### Server
            ${serverReport}
            `;
            } catch (e) {
              summaryBody += `
            #### Server
            No report available
            `;
            }
            
            try {
              const clientReport = fs.readFileSync('reports/outdated-packages-client/outdated-summary.txt', 'utf8');
              summaryBody += `
            #### Client
            ${clientReport}
            `;
            } catch (e) {
              summaryBody += `
            #### Client
            No report available
            `;
            }
            
            summaryBody += `
            
            ### Next Steps
            1. Review any security vulnerabilities in the Security tab
            2. Check for automatically created dependency update PRs
            3. Consider updating outdated packages manually if needed
            
            **Generated on:** ${new Date().toISOString()}
            **Workflow:** [Dependency Updates](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;
            
            // Check if similar issue exists from this week
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'dependencies,weekly-summary',
              state: 'open',
              since: oneWeekAgo.toISOString()
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Weekly Dependency Update Summary - ${new Date().toISOString().split('T')[0]}`,
                body: summaryBody,
                labels: ['dependencies', 'weekly-summary', 'maintenance']
              });
            }
