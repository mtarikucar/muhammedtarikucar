name: Deploy to Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - test
      skip_ssl:
        description: 'Skip SSL setup'
        required: false
        default: 'false'
        type: boolean
      skip_backup:
        description: 'Skip backup process'
        required: false
        default: 'false'
        type: boolean
      dry_run:
        description: 'Dry run (no actual deployment)'
        required: false
        default: 'false'
        type: boolean

env:
  SERVER_IP: "161.97.80.171"
  DOMAIN: "muhammedtarikucar.com"
  PROJECT_NAME: "muhammedtarikucar"
  DEPLOY_USER: "root"
  NODE_VERSION: "18"
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Run server linting
        working-directory: ./server
        run: npm run lint

      - name: Run client linting
        working-directory: ./client
        run: npm run lint

      - name: Run server tests
        working-directory: ./server
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://admin:password123@localhost:27017/test_db?authSource=admin
          JWT_SECRET: test-jwt-secret
          REFRESH_TOKEN_SECRET: test-refresh-secret
        run: npm test

      - name: Build client
        working-directory: ./client
        run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-server:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-client:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.PROJECT_NAME }}-client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test')
    needs: [test, security-scan]
    environment: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add server to known hosts
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.DOMAIN }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Create SSH config for better connection handling
          cat > ~/.ssh/config << EOF
          Host ${{ env.SERVER_IP }}
            HostName ${{ env.SERVER_IP }}
            User ${{ env.DEPLOY_USER }}
            Port 22
            StrictHostKeyChecking no
            UserKnownHostsFile ~/.ssh/known_hosts
            ServerAliveInterval 60
            ServerAliveCountMax 3
            ConnectTimeout 10
          EOF
          chmod 600 ~/.ssh/config

      - name: Deploy to Test Environment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.SERVER_IP }} << 'EOF'
            set -e

            echo "🧪 Starting Test Deployment..."

            # Navigate to test project directory
            cd /opt/${{ env.PROJECT_NAME }}-test || {
              echo "❌ Test project directory not found, cloning repository..."
              cd /opt
              git clone https://github.com/${{ github.repository }}.git ${{ env.PROJECT_NAME }}-test
              cd ${{ env.PROJECT_NAME }}-test
            }

            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin

            # For PR, checkout the PR branch
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              git checkout ${{ github.head_ref }}
              git pull origin ${{ github.head_ref }}
            else
              git reset --hard origin/main
            fi

            # Make scripts executable
            chmod +x deploy-test.sh quick-deploy-fix.sh
            chmod +x deploy-scripts/*.sh

            # Run test deployment
            echo "🔧 Running test deployment..."
            export SKIP_BACKUP=${{ github.event.inputs.skip_backup || 'false' }}
            export DRY_RUN=${{ github.event.inputs.dry_run || 'false' }}
            ./deploy-test.sh

            echo "✅ Test deployment completed!"
          EOF

      - name: Test Environment Health Check
        run: |
          sleep 30
          curl -f http://test.${{ env.DOMAIN }}/health || echo "❌ Test health check failed"
          curl -f http://test.${{ env.DOMAIN }}/test-info || echo "❌ Test info check failed"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add server to known hosts
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.DOMAIN }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Create SSH config for better connection handling
          cat > ~/.ssh/config << EOF
          Host ${{ env.SERVER_IP }}
            HostName ${{ env.SERVER_IP }}
            User ${{ env.DEPLOY_USER }}
            Port 22
            StrictHostKeyChecking no
            UserKnownHostsFile ~/.ssh/known_hosts
            ServerAliveInterval 60
            ServerAliveCountMax 3
            ConnectTimeout 10
          EOF
          chmod 600 ~/.ssh/config

      - name: Create deployment directory
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.SERVER_IP }} "mkdir -p /opt/${{ env.PROJECT_NAME }}"

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.SERVER_IP }} << 'EOF'
            set -e

            echo "🚀 Starting Production Deployment..."

            # Navigate to project directory
            cd /opt/${{ env.PROJECT_NAME }} || {
              echo "❌ Project directory not found, cloning repository..."
              cd /opt
              git clone https://github.com/${{ github.repository }}.git ${{ env.PROJECT_NAME }}
              cd ${{ env.PROJECT_NAME }}
            }

            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main

            # Make scripts executable
            chmod +x deploy.sh deploy-test.sh quick-deploy-fix.sh
            chmod +x deploy-scripts/*.sh

            # Run deployment
            echo "🔧 Running deployment..."
            export SKIP_SSL=${{ github.event.inputs.skip_ssl || 'false' }}
            export SKIP_BACKUP=${{ github.event.inputs.skip_backup || 'false' }}
            export DRY_RUN=${{ github.event.inputs.dry_run || 'false' }}
            ./deploy.sh

            echo "✅ Production deployment completed!"
          EOF



      - name: Production Health Check
        run: |
          sleep 30
          curl -f http://${{ env.DOMAIN }}/health || echo "❌ Production health check failed"
          curl -f http://${{ env.DOMAIN }} || echo "❌ Production site check failed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful to https://${{ env.DOMAIN }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed"
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.SERVER_IP }} "
            cd /opt/${{ env.PROJECT_NAME }}
            ./deploy-scripts/12-rollback.sh --force
          "

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: [deploy]

    steps:
      - name: Setup SSH for cleanup
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH for cleanup
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Remove old images
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.SERVER_IP }} "
            docker image prune -f
            docker system prune -f --volumes
          "
