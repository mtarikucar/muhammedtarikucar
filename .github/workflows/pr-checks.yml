name: Pull Request Checks

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "18"

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.changes.outputs.server }}
      client: ${{ steps.changes.outputs.client }}
      docker: ${{ steps.changes.outputs.docker }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            server:
              - 'server/**'
              - 'package*.json'
            client:
              - 'client/**'
              - 'package*.json'
            docker:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
              - '.dockerignore'
            docs:
              - '*.md'
              - 'docs/**'

  lint-server:
    name: Lint Server Code
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run ESLint
        working-directory: ./server
        run: npm run lint

      - name: Check for security vulnerabilities
        working-directory: ./server
        run: npm audit --audit-level=moderate

  lint-client:
    name: Lint Client Code
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.client == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run ESLint
        working-directory: ./client
        run: npm run lint

      - name: Check for security vulnerabilities
        working-directory: ./client
        run: npm audit --audit-level=moderate

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true'
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: ./server
        run: npm ci

      - name: Run tests
        working-directory: ./server
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://admin:password123@localhost:27017/test_db?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          REFRESH_TOKEN_SECRET: test-refresh-secret
        run: npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./server/coverage/lcov.info
          flags: server
          name: server-coverage

  build-client:
    name: Build Client
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.client == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/dist/
          retention-days: 7

  docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.server == 'true' || needs.changes.outputs.client == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: false
          tags: test-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: false
          tags: test-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test docker-compose
        run: |
          cp docker-compose.yml docker-compose.test.yml
          sed -i 's/image: .*/image: test-server:latest/' docker-compose.test.yml
          docker-compose -f docker-compose.test.yml config

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.client == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Build and analyze bundle
        working-directory: ./client
        run: |
          npm run build
          npx vite-bundle-analyzer dist/

      - name: Comment bundle size
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read bundle analysis results
            const distPath = path.join(process.cwd(), 'client/dist');
            const files = fs.readdirSync(distPath, { recursive: true });
            
            let totalSize = 0;
            const fileList = files
              .filter(file => file.endsWith('.js') || file.endsWith('.css'))
              .map(file => {
                const filePath = path.join(distPath, file);
                const stats = fs.statSync(filePath);
                totalSize += stats.size;
                return `- ${file}: ${(stats.size / 1024).toFixed(2)} KB`;
              });
            
            const comment = `## Bundle Size Analysis
            
            **Total Size:** ${(totalSize / 1024).toFixed(2)} KB
            
            **Files:**
            ${fileList.join('\n')}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-server, lint-client, test-server, build-client, docker-build, security-scan]
    if: always()
    
    steps:
      - name: Create PR summary
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = [
              { name: 'Lint Server', status: '${{ needs.lint-server.result }}' },
              { name: 'Lint Client', status: '${{ needs.lint-client.result }}' },
              { name: 'Test Server', status: '${{ needs.test-server.result }}' },
              { name: 'Build Client', status: '${{ needs.build-client.result }}' },
              { name: 'Docker Build', status: '${{ needs.docker-build.result }}' },
              { name: 'Security Scan', status: '${{ needs.security-scan.result }}' }
            ];
            
            const summary = jobs.map(job => {
              const icon = job.status === 'success' ? '✅' : 
                          job.status === 'failure' ? '❌' : 
                          job.status === 'skipped' ? '⏭️' : '⏳';
              return `${icon} ${job.name}`;
            }).join('\n');
            
            const comment = `## PR Check Results
            
            ${summary}
            
            ${jobs.every(job => job.status === 'success' || job.status === 'skipped') ? 
              '🎉 All checks passed! This PR is ready for review.' : 
              '⚠️ Some checks failed. Please review and fix the issues.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
